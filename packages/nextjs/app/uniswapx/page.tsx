"use client";

import { Intent } from "./_components/Intent";
import { parsedIntent } from "./_helpers/testIntent";
import { NextPage } from "next";
import { erc20Abi } from "viem";
import { useBalance, useBlock, useReadContract } from "wagmi";
import { useScaffoldWriteContract } from "~~/hooks/scaffold-eth";

const contractAddress = "0xCf027C4b03DC18A60422AB981b1Ea1A27EC2E06F";
const USDT_ADDRESS = "0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9";

const signedIntent = {
  order:
    "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001000000000000000000000000004449cd34d1eb1fedcf02a1be3834ffde8e6a6180000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000000000000000000000000000000000003bafcb1e000000000000000000000000000000000000000000000000000000003bafcb1e00000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000003800000000000000000000000001bd1aadc9e230626c44a139d7e70d842749351eb00000000000000000000000001f1642ccd7d9b6d350a40e58eb20efa8f536269c6b0afe0a0b23a7fa24b72c69f8c0fe697f4e19c597e52af58c53215ad70fe0000000000000000000000000000000000000000000000000000000000671ba0bf000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000000000000000000000000000000000003bbc44eb000000000000000000000000000000000000000000000000000000003b6fb3cb00000000000000000000000001f1642ccd7d9b6d350a40e58eb20efa8f53626900000000000000000000000000000000000000000000000000000000671ba07c00000000000000000000000000000000000000000000000000000000671ba08c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000003bbc44eb0000000000000000000000000000000000000000000000000000000000000041586b516924b46b7322e2ea74ccfa6c685a0fdc4bacc04081aec6fc4701445662281df99f65e0691533caf7226f33503ae1d1ed34532265256427a66a6202d3fa1c00000000000000000000000000000000000000000000000000000000000000" as `0x${string}`,
  sig: "0xea40b047ca77fb2660efaf66c7907e1d6963c4bc052661f0a16b413c730c7d7573549fb5a7e6e094f97c66a47f1273be4e9b2121a20fc8d6460a9d672304583b1c" as `0x${string}`,
};
const callbackData =
  "0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000000000000000000000000000000000000000000002000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001a45ae401dc00000000000000000000000000000000000000000000000000000000672a815d00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e404e45aaf000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb90000000000000000000000000000000000000000000000000000000000000064000000000000000000000000cf027c4b03dc18a60422ab981b1ea1a27ec2e06f000000000000000000000000000000000000000000000000000000003bafcb1e000000000000000000000000000000000000000000000000000000003b6a3bef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" as `0x${string}`;

const UniswapX: NextPage = () => {
  const { writeContractAsync: writeSwapRouter02ExecutorAsync } = useScaffoldWriteContract("SwapRouter02Executor");

  const { data: contractBalanceUSDT, refetch: refetchContractBalanceUSDT } = useReadContract({
    abi: erc20Abi,
    address: USDT_ADDRESS,
    args: [contractAddress],
    functionName: "balanceOf",
  });
  console.log("contractBalanceUSDT", contractBalanceUSDT);

  const block = useBlock();
  if (block?.data) {
    console.log("block", block.data.number, block.data.timestamp);
  }

  return (
    <>
      <div className="flex items-center flex-col flex-grow pt-10">
        <div className="px-5 text-center max-w-4xl">
          <h1 className="text-4xl font-bold">UniswapX</h1>
          <div>
            <p>
              This extension shows you how to fill{" "}
              <a
                target="_blank"
                href="https://docs.uniswap.org/contracts/uniswapx/overview"
                className="underline font-bold text-nowrap"
              >
                UniswapX
              </a>{" "}
              intents
            </p>
          </div>

          <div className="divider my-0" />
        </div>

        <div className="flex flex-col justify-center items-center bg-base-300 w-full mt-8 px-8 pt-6 pb-12">
          <div className="flex flex-col bg-base-100 px-10 py-10 text-center items-center w-full md:w-2/4 rounded-3xl mt-10">
            <div>
              <Intent intent={parsedIntent}></Intent>
            </div>

            <div>
              <button
                className="btn btn-primary text-lg px-12 mt-2"
                onClick={async () => {
                  const result = await writeSwapRouter02ExecutorAsync({
                    functionName: "execute",
                    args: [signedIntent, callbackData],
                  });
                  console.log("result", result);
                  refetchContractBalanceUSDT()
                }}
              >
                Fill Intent
              </button>
              {(contractBalanceUSDT || contractBalanceUSDT === 0n) && <div>
                Contract USDT balance: {contractBalanceUSDT.toString()}
              </div>}
              
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default UniswapX;
