/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  42161: {
    SwapRouter02Executor: {
      address: "0xCf027C4b03DC18A60422AB981b1Ea1A27EC2E06F",
      abi: [
        {
          inputs: [
            {
              internalType: "contract IReactor",
              name: "_reactor",
              type: "address",
            },
            {
              internalType: "address",
              name: "_owner",
              type: "address",
            },
            {
              internalType: "contract ISwapRouter02",
              name: "_swapRouter02",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [],
          name: "MsgSenderNotReactor",
          type: "error",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "user",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "newOwner",
              type: "address",
            },
          ],
          name: "OwnershipTransferred",
          type: "event",
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "bytes",
                  name: "order",
                  type: "bytes",
                },
                {
                  internalType: "bytes",
                  name: "sig",
                  type: "bytes",
                },
              ],
              internalType: "struct SignedOrder",
              name: "order",
              type: "tuple",
            },
            {
              internalType: "bytes",
              name: "callbackData",
              type: "bytes",
            },
          ],
          name: "execute",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "bytes",
                  name: "order",
                  type: "bytes",
                },
                {
                  internalType: "bytes",
                  name: "sig",
                  type: "bytes",
                },
              ],
              internalType: "struct SignedOrder[]",
              name: "orders",
              type: "tuple[]",
            },
            {
              internalType: "bytes",
              name: "callbackData",
              type: "bytes",
            },
          ],
          name: "executeBatch",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "contract ERC20[]",
              name: "tokensToApprove",
              type: "address[]",
            },
            {
              internalType: "bytes[]",
              name: "multicallData",
              type: "bytes[]",
            },
          ],
          name: "multicall",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "owner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              components: [
                {
                  components: [
                    {
                      internalType: "contract IReactor",
                      name: "reactor",
                      type: "address",
                    },
                    {
                      internalType: "address",
                      name: "swapper",
                      type: "address",
                    },
                    {
                      internalType: "uint256",
                      name: "nonce",
                      type: "uint256",
                    },
                    {
                      internalType: "uint256",
                      name: "deadline",
                      type: "uint256",
                    },
                    {
                      internalType: "contract IValidationCallback",
                      name: "additionalValidationContract",
                      type: "address",
                    },
                    {
                      internalType: "bytes",
                      name: "additionalValidationData",
                      type: "bytes",
                    },
                  ],
                  internalType: "struct OrderInfo",
                  name: "info",
                  type: "tuple",
                },
                {
                  components: [
                    {
                      internalType: "contract ERC20",
                      name: "token",
                      type: "address",
                    },
                    {
                      internalType: "uint256",
                      name: "amount",
                      type: "uint256",
                    },
                    {
                      internalType: "uint256",
                      name: "maxAmount",
                      type: "uint256",
                    },
                  ],
                  internalType: "struct InputToken",
                  name: "input",
                  type: "tuple",
                },
                {
                  components: [
                    {
                      internalType: "address",
                      name: "token",
                      type: "address",
                    },
                    {
                      internalType: "uint256",
                      name: "amount",
                      type: "uint256",
                    },
                    {
                      internalType: "address",
                      name: "recipient",
                      type: "address",
                    },
                  ],
                  internalType: "struct OutputToken[]",
                  name: "outputs",
                  type: "tuple[]",
                },
                {
                  internalType: "bytes",
                  name: "sig",
                  type: "bytes",
                },
                {
                  internalType: "bytes32",
                  name: "hash",
                  type: "bytes32",
                },
              ],
              internalType: "struct ResolvedOrder[]",
              name: "",
              type: "tuple[]",
            },
            {
              internalType: "bytes",
              name: "callbackData",
              type: "bytes",
            },
          ],
          name: "reactorCallback",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "newOwner",
              type: "address",
            },
          ],
          name: "transferOwnership",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "recipient",
              type: "address",
            },
          ],
          name: "unwrapWETH",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "recipient",
              type: "address",
            },
          ],
          name: "withdrawETH",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          stateMutability: "payable",
          type: "receive",
        },
      ],
      inheritedFunctions: {
        owner: "solmate/src/auth/Owned.sol",
        transferOwnership: "solmate/src/auth/Owned.sol",
      },
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
